Fn::Base64:
  Fn::Sub: |
    Content-Type: multipart/mixed; boundary="===============0000000000000000000=="
    MIME-Version: 1.0

    --===============0000000000000000000==
    Content-Type: text/cloud-boothook; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    Content-Disposition: attachment; filename="boothook-cfg-docker"

    #cloud-boothook
    hostname ${AWS::StackName}-"$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id | cut -c 3-)".domain.com
    sed -i "s/^\(HOSTNAME=\).*/\1$(hostname -s).domain.com/" /etc/sysconfig/network
    cloud-init-per instance hosts_file echo "$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/local-ipv4)    $(hostname -s)    $(hostname)" >> /etc/hosts
    cloud-init-per instance docker_options sed -i 's#^\(OPTIONS=.*\)\"#\1 --ip-forward=true -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --experimental\"#' /etc/sysconfig/docker
    cloud-init-per instance docker_storage_options sed -i '/EXTRA_DOCKER_STORAGE_OPTIONS/d' /etc/sysconfig/docker-storage-setup
    cloud-init-per instance docker_storage_driver echo "STORAGE_DRIVER=overlay2" >> /etc/sysconfig/docker-storage-setup
    cloud-init-per instance docker_storage_driver echo 'EXTRA_DOCKER_STORAGE_OPTIONS="--storage-opt overlay2.override_kernel_check=true"' >> /etc/sysconfig/docker-storage-setup
    /bin/echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> /etc/sysctl.conf
    sed -i 's/net.ipv4.ip_forward = 0/net.ipv4.ip_forward = 1/' /etc/sysctl.conf
    iptables -P FORWARD ACCEPT
    sysctl -p

    --===============0000000000000000000==
    Content-Type: text/cloud-config; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    Content-Disposition: attachment; filename="cloud-cfg-jenker"

    #cloud-config
    packages:
    - aws-cli
    - aws-cfn-bootstrap
    runcmd:
    - hostname ${AWS::StackName}-"$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id | cut -c 3-)".domain.com
    - aws ec2 create-tags --resources $(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/instance-id) --region ${AWS::Region} --tags Key=Name,Value=$(hostname -s) Key=CNAME,Value=$(hostname -s) Key=Zone,Value=domain.com.
    - yum -y update --security
    - /usr/sbin/groupadd -g 10000 jenker
    - /usr/sbin/useradd -u 10000 -g 10000 -m -b /home -s /sbin/nologin jenker
    - /bin/mkdir -p /home/jenker/.m2/repository
    - /bin/chown -R jenker:jenker /home/jenker
    - aws s3 cp s3://your.repo.com/conf/daemon.json /etc/docker/
    - aws s3 cp s3://your.repo.com/bin/docker-credential-ecr-login /usr/local/bin/
    - chmod +x /usr/local/bin/docker-credential-ecr-login
    - /bin/mkdir -p ~/.docker
    - aws s3 cp s3://your.repo.com/conf/config.json ~/.docker/
    - mkdir -p /var/log/jenkins /var/lib/jenkins && chmod 775 /var/log/jenkins /var/lib/jenkins && chown -R 497:docker /var/log/jenkins /var/lib/jenkins
    - mkdir -p /tmp/workspace/remoting/logs && chown -R jenker:jenker /tmp/workspace
    - /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource instance01
    - /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource instance01
    - aws s3 cp s3://your.repo.com/conf/ecs.config /etc/ecs/ecs.config
    - echo "ECS_CLUSTER=${EnvironmentType}-${BuildNumber}-jenker-agents" >> /etc/ecs/ecs.config
    - yum -y update ecs-init aws-cfn-bootstrap aws-cli
    - yum install -y https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm

    --===============0000000000000000000==
    Content-Type: text/x-shellscript; charset="us-ascii"
    MIME-Version: 1.0
    Content-Transfer-Encoding: 7bit
    Content-Disposition: attachment; filename="shellscript-jenker"

    #!/bin/bash
    yum -y install nfs-utils

    if [ ! -d /mnt/${AppName} ]; then
      mount -t nfs4 -o nfsvers=4.1 $(aws ssm get-parameters --region ${AWS::Region} --names /mappings/${EnvironmentType}/vpc/efs-fileSystemId --query Parameters[0].Value --output text).efs.${AWS::Region}.amazonaws.com:/ /mnt
      mkdir -p /mnt/${AppName}
      umount /mnt
      mkdir -p /mnt/${AppName} /var/log/jenkins /var/lib/jenkins
      cd /var/lib/jenkins
      mkdir -p monitoring nodes war workspace
      chown -R 497:495 /var/lib/jenkins /var/log/jenkins /mnt/${AppName}
      echo "$(aws ssm get-parameters --region ${AWS::Region} --names /mappings/${EnvironmentType}/vpc/efs-fileSystemId --query Parameters[0].Value --output text).efs.${AWS::Region}.amazonaws.com:/${AppName} /mnt/${AppName} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
      (crontab -l 2>/dev/null; echo "0 */2 * * * /usr/bin/aws s3 sync /mnt/jenker/backups/ s3://your.repo.com/jenkins/${EnvironmentType}/ --delete" ) | crontab -i -
      mount -a
    fi

    # start cadvisor
    /usr/bin/docker run -d \
      --name=cadvisor \
      -p  9090:8080 \
      -v /:/rootfs:ro \
      -v /var/run:/var/run:rw \
      -v /sys:/sys:ro \
      -v /var/lib/docker/:/var/lib/docker:ro \
      -v /cgroup:/cgroup:ro \
      -v /var/run/docker.sock:/var/run/docker.sock \
      --privileged=true \
      --restart=unless-stopped 012345678901.dkr.ecr.us-west-1.amazonaws.com/cadvisor:latest

    # start nginx https redirect
    /usr/bin/docker run -d \
      --name nginx-redirect \
      -p 8081:80 \
      --restart=unless-stopped 012345678901.dkr.ecr.us-west-1.amazonaws.com/nginx-https-redirect:latest

    # start jenkins
    /usr/bin/docker run -d \
    --name jenkins \
    --env JAVA_OPTS=-Dhudson.model.LoadStatistics.clock=1000 \
    -p 5000:5000 \
    -p 8080:8080 \
    -v /mnt/jenker/jenkins_home:/var/jenkins_home \
    -v /mnt/jenker/backups:/var/jenkins_home/backups \
    -v /var/lib/jenkins/monitoring:/var/jenkins_home/monitoring \
    -v /var/lib/jenkins/nodes:/var/jenkins_home/nodes \
    -v /var/lib/jenkins/war:/var/jenkins_home/war \
    -v /var/lib/jenkins/workspace:/var/jenkins_home/workspace \
    -v /var/log/jenkins:/var/jenkins_home/logs \
    -v /var/run/docker.sock:/var/run/docker.sock \
    --restart=unless-stopped 012345678901.dkr.ecr.us-west-1.amazonaws.com/jenkins-docker:latest

    --===============0000000000000000000==--

