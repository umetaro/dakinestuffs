#!/usr/bin/env bash

#
# A second, less shitty attempt at a bash wrapper for the AWS CLI
#

REGION="${AWS_DEFAULT_REGION:-us-east-1}"
OUTPUT="${AWS_DEFAULT_OUTPUT:-text}"

function usage() {
cat <<USAGE
usage:
  ${0} [ -d | --debug ]
  ${0} [ -e | --emr ]
  ${0} [ -E ]
  ${0} [ -g | --sg ] [ security group ID | security group name fragment ]
  ${0} [ -i | --instanceid ] instance-id
  ${0} [ -n | --name ] [ instance name fragment ]
  ${0} [ -p | --ip ] [ ip-address ]
  ${0} [ -v | --vpc ]
USAGE
}

if [ ! $1 ]; then
  usage
fi

if ! ARGS=$( getopt --options deEg:i:n:p:v --longoptions debug,emr,instanceid:,ip:,name:,sg:,vpc -- "$@" ); then
  echo "option parsing error"
  exit 1
fi

eval set -- "$ARGS"
while [[ $# -gt 0 ]]; do
  case "$1" in
    -d | --debug )
      set -x
      ;;
  #  cfn)
    -E )
      widths="%-30s %-20s\n"
      printf "${widths}" "NAME" "CLUSTER-ID"
      printf "${widths}" \
        $(aws emr list-clusters \
          --active \
          --query 'Clusters[*].[Name,Id]' \
          --output text)
      ;;
    -e | --emr )
      widths="%-30s %-20s %-20s %-20s\n"
      printf "${widths}" "NAME" "CLUSTER-ID" "MASTER" "CORE"
      while IFS='' read -r i; do
        read -r name id <<< $i
        read -r mip cip <<< $(aws emr list-instances \
          --cluster-id "$id" \
          --instance-group-types MASTER CORE \
          --query 'Instances[].PrivateIpAddress' \
          --output text)
        printf "${widths}" ${name} ${id} ${mip} ${cip}
      done <<< $(aws emr list-clusters \
        --active \
        --query 'Clusters[*].[Name,Id]' \
        --output text)
      ;;
    -i | --instanceid )
      OPTARG="$2"
      aws ec2 describe-instances \
        --filters Name=instance-id,Values="${OPTARG}" \
        --query 'Reservations[*].Instances[*].[Tags[?Key==`Name`] | [0].Value,InstanceId,PublicIpAddress,PrivateIpAddress,Placement.AvailabilityZone,InstanceType,VpcId]' \
        --region "${REGION}" \
        --output "${OUTPUT}"
      shift
      ;;  
    -n | --name )
      OPTARG="$2"
      widths="%-42s %-20s %-15s %-15s %-12s %-12s %-18s\n"
      printf "${widths}" "NAME" "INSTANCE-ID" "PUBLIC-IP" "PRIVATE-IP" "AZ" "TYPE" "VPC-ID"
      printf "${widths}" \
        $(aws ec2 describe-instances \
          --filters Name=tag:Name,Values="*${OPTARG}*" \
          --query 'Reservations[*].Instances[*].[Tags[?Key==`Name`] | [0].Value,InstanceId,PublicIpAddress,PrivateIpAddress,Placement.AvailabilityZone,InstanceType,VpcId]' \
          --region "${REGION}" \
          --output "${OUTPUT}")
      shift
      ;;  
    -p | --ip )
      OPTARG="$2"
      aws ec2 describe-addresses \
        --filters Name=public-ip,Values="${OPTARG}" \
        --query 'Addresses[].[InstanceId,PublicIp,PrivateIpAddress,NetworkInterfaceId]' \
        --region "${REGION}" \
        --output "${OUTPUT}" &
      aws ec2 describe-network-interfaces \
        --filters Name=private-ip-address,Values="${OPTARG}" \
        --query 'NetworkInterfaces[].[Attachment.InstanceId,Association.PublicIp,PrivateIpAddress,AvailabilityZone,Groups[0].GroupId]' \
        --region "${REGION}" \
        --output "${OUTPUT}" &
      aws ec2 describe-network-interfaces \
        --filters Name=association.public-ip,Values="${OPTARG}" \
        --query 'NetworkInterfaces[].[Attachment.InstanceId,Association.PublicIp,PrivateIpAddress,AvailabilityZone,Groups[0].GroupId]' \
        --region "${REGION}" \
        --output "${OUTPUT}" &
      wait
      shift
      ;;  
    -g | --sg )
      OPTARG="$2"
      if [[ ${OPTARG} =~ ^sg-[a-z0-9]+ ]]; then
        aws ec2 describe-security-groups \
          --group-ids "${OPTARG}" \
          --query 'SecurityGroups[].[GroupName,GroupId]' \
          --region "${REGION}" \
          --output "${OUTPUT}" \
          | sort | column -t
      else
        aws ec2 describe-security-groups \
          --filters Name=group-name,Values="*${OPTARG}*" \
          --query 'SecurityGroups[].[GroupName,GroupId]' \
          --region "${REGION}" \
          --output "${OUTPUT}" \
          | sort | column -t
      fi
      shift
      ;;
  #  ssm)
    -v | --vpc )
      aws ec2 describe-vpcs \
        --query 'Vpcs[].[Tags[?Key==`Name`] | [0].Value,VpcId,CidrBlock]' \
        --region "${REGION}" \
        --output "${OUTPUT}" \
        | sort -Vk2 | column -t
      ;;
# can't get this to work for some damned reason
#    -- )
#      echo "ERROR: illegal option: ${6}"
#      shift 2
#      exit 1
#      ;;
  esac
  shift
done
