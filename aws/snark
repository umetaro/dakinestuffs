#!/usr/bin/env bash

#
# A second, less shitty attempt at a bash wrapper for the AWS CLI
#

REGION="${AWS_DEFAULT_REGION:-us-east-1}"
OUTPUT="${AWS_DEFAULT_OUTPUT:-text}"

function usage() {
cat <<USAGE
Usage:
  ${0} [-c] <cloudformation stack name>
  ${0} [-d]
  ${0} [-e] <instance_id>
  ${0} [-E]
  ${0} [-g] <security_group_id/name_fragment>
  ${0} [-i] <instance_id>
  ${0} [-n] <instance_name/fragment>
  ${0} [-p] <ip_address>
  ${0} [-s] <parameter store path>
  ${0} [-v] <instance_id>
  ${0} [-V] <vpc id>

  [-c | --cf      ] cloudformation stack-name
  [-d | --debug   ] Debug
  [-e | --emr     ] List EMR cluster info
  [-E | --emless  ] List EMR cluster names and IDs only
  [-g | --sg      ] Search security groups by ID or name fragment
  [-i | --id      ] Search EC2 instances by ID
  [-n | --name    ] Search EC2 instances by 'Name' tag
  [-p | --ip      ] Search EC2 instances by public or private IP address
  [-s | --ssm     ] List Parameter Store values of provided path recursively
  [-v | --volume  ] List volumes attached to an instance
  [   | --vpc     ] List VPC information
  [-V | --subnets ] List VPC subnets

USAGE
}

if [ ! "${1}" ]; then
  usage
fi

if ! ARGS=$( getopt --options c:deEg:i:n:p:s:v:V: --longoptions cf:,debug,emr,instanceid:,ip:,name:,sg:,ssm:,subnets:,volume:,vpc -- "$@" ); then
  echo "option parsing error"
  exit 1
fi

eval set -- "$ARGS"
while [[ $# -gt 0 ]]; do
  case "$1" in
    -c | --cf )
      OPTARG="$2"
      aws cloudformation describe-stacks \
        --stack-name "${OPTARG}" \
        --query 'Stacks[].Parameters[].[ParameterKey,ParameterValue,ResolvedValue]' | column -t
      ;;
    -d | --debug )
      set -x
      ;;
    -E | --emless )
      widths="%-30s %-20s\n"
      printf "${widths}" "NAME" "CLUSTER-ID"
      printf "${widths}" \
        $(aws emr list-clusters \
          --active \
          --query 'Clusters[*].[Name,Id]' \
          --output text)
      ;;
    -e | --emr )
      widths="%-30s %-20s %-20s %-20s\n"
      printf "${widths}" "NAME" "CLUSTER-ID" "MASTER" "CORE"
      while IFS='' read -r i; do
        read -r name id <<< $i
        read -r mip cip <<< $(aws emr list-instances \
          --cluster-id "$id" \
          --instance-group-types MASTER CORE \
          --query 'Instances[].PrivateIpAddress' \
          --output text)
        printf "${widths}" ${name} ${id} ${mip} ${cip}
      done <<< $(aws emr list-clusters \
        --active \
        --query 'Clusters[*].[Name,Id]' \
        --output text)
      ;;
    -g | --sg )
      OPTARG="$2"
      if [[ ${OPTARG} =~ ^sg-[a-z0-9]+ ]]; then
        aws ec2 describe-security-groups \
          --group-ids "${OPTARG}" \
          --query 'SecurityGroups[].[GroupName,GroupId]' \
          --region "${REGION}" \
          --output "${OUTPUT}" \
          | sort | column -t
      else
        aws ec2 describe-security-groups \
          --filters Name=group-name,Values="*${OPTARG}*" \
          --query 'SecurityGroups[].[GroupName,GroupId]' \
          --region "${REGION}" \
          --output "${OUTPUT}" \
          | sort | column -t
      fi
      shift
      ;;
    -i | --instanceid )
      OPTARG="$2"
      aws ec2 describe-instances \
        --filters Name=instance-id,Values="${OPTARG}" \
        --query 'Reservations[*].Instances[*].[Tags[?Key==`Name`] | [0].Value,InstanceId,PublicIpAddress,PrivateIpAddress,Placement.AvailabilityZone,InstanceType,VpcId]' \
        --region "${REGION}" \
        --output "${OUTPUT}"
      shift
      ;;
    -n | --name )
      OPTARG="$2"
      widths="%-42s %-20s %-15s %-15s %-12s %-12s %-18s\n"
      printf "${widths}" "NAME" "INSTANCE-ID" "PUBLIC-IP" "PRIVATE-IP" "AZ" "TYPE" "VPC-ID"
      printf "${widths}" \
        $(aws ec2 describe-instances \
          --filters Name=tag:Name,Values="*${OPTARG}*" \
          --query 'Reservations[*].Instances[*].[Tags[?Key==`Name`] | [0].Value,InstanceId,PublicIpAddress,PrivateIpAddress,Placement.AvailabilityZone,InstanceType,VpcId]' \
          --region "${REGION}" \
          --output "${OUTPUT}")
      shift
      ;;
    -p | --ip )
      OPTARG="$2"
      aws ec2 describe-addresses \
        --filters Name=public-ip,Values="${OPTARG}" \
        --query 'Addresses[].[InstanceId,PublicIp,PrivateIpAddress,NetworkInterfaceId]' \
        --region "${REGION}" \
        --output "${OUTPUT}" &
      aws ec2 describe-network-interfaces \
        --filters Name=private-ip-address,Values="${OPTARG}" \
        --query 'NetworkInterfaces[].[Attachment.InstanceId,Association.PublicIp,PrivateIpAddress,AvailabilityZone,Groups[0].GroupId]' \
        --region "${REGION}" \
        --output "${OUTPUT}" &
      aws ec2 describe-network-interfaces \
        --filters Name=association.public-ip,Values="${OPTARG}" \
        --query 'NetworkInterfaces[].[Attachment.InstanceId,Association.PublicIp,PrivateIpAddress,AvailabilityZone,Groups[0].GroupId]' \
        --region "${REGION}" \
        --output "${OUTPUT}" &
      wait
      shift
      ;;
    -s | --ssm )
      OPTARG="$2"
      aws ssm get-parameters-by-path --path "${OPTARG}" --recursive --with-decryption --query 'Parameters[].[Name,Value]' | column -t
      ;;
    -v | --volume )
      OPTARG="$2"
      aws ec2 describe-volumes --filters Name=attachment.instance-id,Values="${OPTARG}" \
        --query 'Volumes[*].{ID:VolumeId,SIZE:Size,INSTANCE:Attachments[0].InstanceId,DEVICE:Attachments[0].Device}'
      ;;
    --vpc )
      aws ec2 describe-vpcs \
        --query 'Vpcs[].[Tags[?Key==`Name`] | [0].Value,VpcId,CidrBlock]' \
        --region "${REGION}" \
        --output "${OUTPUT}" \
        | sort -Vk2 | column -t
      ;;
    -V )
      OPTARG="$2"
      aws ec2 describe-subnets --filter Name=vpc-id,Values="${OPTARG}" --query 'Subnets[].{ID:SubnetId,AZ:AvailabilityZone,CIDR:CidrBlock,NAME:Tags[?Key==`Name`] | [0].Value}'
      ;;
# can't get this to work for some damned reason
#    -- )
#      echo "ERROR: illegal option: ${6}"
#      shift 2
#      exit 1
#      ;;
  esac
  shift
done
